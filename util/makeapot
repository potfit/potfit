#!/usr/bin/env python2
################################################################
#
# makeapot:
#   create an analytic potential file for potfit
#
################################################################
#
#   Copyright 2013
#             Institute for Theoretical and Applied Physics
#             University of Stuttgart, D-70550 Stuttgart, Germany
#             https://www.potfit.net/
#
#################################################################
#
#   This file is part of potfit.
#
#   potfit is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   potfit is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with potfit; if not, see <http://www.gnu.org/licenses/>.
#
#################################################################

import argparse
import copy
import functions
import inspect
import random
import sys

interaction_list = [
        ['pair', 'pair potentials'],
        ['eam', 'embedded atom method'],
        ['meam', 'modified embedded atom method'],
        ['adp', 'angular dependent potential'],
        ['stiweb', 'Stillinger-Weber potential'],
        ['tersoff', 'Tersoff potential']]

def get_cols(interaction, n):
    cols = n*(n+1)/2
    if interaction == 'pair':
        return cols
    elif interaction == 'eam':
        return cols + 2 * n
    elif interaction == 'adp':
        return 3 * cols + 2 * n
    elif interaction == 'meam':
        return 2 * cols + 3 * n
    elif interaction == 'stiweb':
        return 2 * cols + 1
    elif interaction == 'tersoff':
        return n * n
    else:
        return 0

def create_pot_table(potentials):
    table = []
    for i in potentials:
        if len(i.split('*')) == 1:
            count = 1
            name = i
        elif len(i.split('*')) == 2:
            try:
                count = int(i.split('*')[0])
            except:
                sys.stderr.write("\nCould not read your potential list: >> %s << unknown.\n" % i)
                sys.stderr.write("Please use the following syntax only: pot or 3*pot\n")
                sys.exit()
            name = i.split('*')[1]
        else:
            sys.stderr.write("\nCould not read your potential list: >> %s << unknown.\n" % i)
            sys.stderr.write("Please use the following syntax only: pot or 3*pot\n")
            sys.exit()
        do_smooth = 0
        if name.endswith('_sc'):
            do_smooth = 1
            name = name[:-3]
            if args.g:
                do_smooth = 2
        for j in range(count):
            try:
                table.append(getattr(functions, name)())
                table[-1].set_properties(args.cutoff, do_smooth, args.random)
            except:
                sys.stderr.write("Could not find the function type >> %s <<\n\n" % name)
                write_pot_list()
                sys.exit()
    return table

def write_list():
    write_interaction_list()
    print ""
    write_pot_list()

def write_interaction_list():
    print "List of available interaction models:\n"
    for item in interaction_list:
        print "  %s   \t-\t%s" % (item[0],item[1])

def write_pot_list():
    print "List of available potential functions:\n  "
    for name, obj in inspect.getmembers(functions):
        if inspect.isclass(obj):
            myname = obj.__name__
            if myname != 'potfit_function' and \
                    not myname.startswith('stiweb') and \
                    not myname.startswith('tersoff'):
                sys.stdout.write(" %s," % obj.__name__)
    print ""

def write_header(interaction, cols):
    print "#F 0 %s" % cols
    print "#T %s" % interaction.upper()
    print "#I" + "%s" % " 0" * cols
    print "#E"

def write_cp(n):
    print ""
    for i in range(n):
        print "cp_%s -1 10 0" % i

def write_global_cutoff(rand):
    print ""
    print "global 1"
    if rand:
        print "h\t{:.2f}\t{:.2f}\t{:.2f}".format(0.5+1.5*random.random(),0.5,2)
    else:
        print "h 1 0.5 2"
    pass

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description =
        '''Create an analytic potential file for potift.''',
    epilog=
        '''To specify multiple potentials you can use the following syntax:

    makeapot -n 3 -i eam -f 6*eopp 3*csw 3*bjs

which uses 6 eopp potentials, 3 csw and 3 bjs in this order.''')

parser.add_argument('-n', type=int, default=1,
    help='number of atoms types, runs from 0 to N-1')
parser.add_argument('-co', '--cutoff', type=float, default=6.0,
    help='cutoff radius')
parser.add_argument('-g', action='store_true',
    help='use global cutoff parameter')
parser.add_argument('-r', '--random', action='store_true',
    help='randomize the starting potential')
parser.add_argument('-i', '--type', type=str, default='pair',
    help='interaction type, e.g. pair, eam, adp, ...')
parser.add_argument('-l', '--list', action='store_true',
    help='list options which are available')
parser.add_argument('-cp', action='store_true',
    help='enable chemical potentials (only for pair)')
parser.add_argument('-f', type=str, nargs='*', dest='functions',
    help='name of potential functions, either name or i*name, where i=1,2,3,...')

args = parser.parse_args()

if args.list:
    write_list()
    sys.exit()

# Check for sane arguments
if args.n < 1:
    sys.stderr.write("The number of atom types needs to be larger than 0!\n")
    sys.exit()
n = args.n

if args.cutoff < 0:
    sys.stderr.write("The cutoff distance needs to be positive!\n")
    sys.exit()


# Check interaction type
cols = int(get_cols(args.type.lower(), n))

if cols == 0:
    sys.stderr.write("Unknown interaction type >> %s <<\n\n" % args.type)
    write_interaction_list()
    sys.exit()

# potentials with arbitrary potential functions
if not args.type in ['tersoff', 'stiweb']:
    if not args.functions:
        sys.stderr.write("Error: You did not specify any potential functions!\n")
        sys.exit()
    table = create_pot_table(args.functions)
    if len(table) != cols:
        sys.stderr.write("Wrong number of potential functions given!\n")
        sys.stderr.write("A %s potential for %s atom types requires %s functions, you specified %s.\n" % (args.type.lower(), args.n, cols, len(table)))
        sys.exit()
    write_header(args.type, cols)
    if args.cp and args.type.lower() == 'pair':
        write_cp(n)
    if args.g:
        write_global_cutoff(args.random)
    for i in table:
        print ""
        i.write_pot_table()
# potentials with predefined potential functions
elif args.type == 'tersoff':
    paircol = n*(n+1)/2
    table = []
    for i in range(paircol):
        table.append(functions.tersoff_pot())
        table[-1].set_properties(args.cutoff, 0, args.random)
    for i in range(paircol-n):
        table.append(functions.tersoff_mix())
        table[-1].set_properties(args.cutoff, 0, args.random)
    write_header(args.type, cols)
    for i in table:
        print ""
        i.write_pot_table()
elif args.type == 'stiweb':
    paircol = n*(n+1)/2
    table = []
    for i in range(paircol):
        table.append(functions.stiweb_2())
        table[-1].set_properties(args.cutoff,0,args.random)
    for i in range(paircol):
        table.append(functions.stiweb_3())
        table[-1].set_properties(args.cutoff,0,args.random)
    write_header(args.type, cols)
    for i in table:
        print ""
        i.write_pot_table()
    print ""
    print "type stiweb_lambda"
    print "cutoff %s" % args.cutoff
    for i in range(n):
        for j in range(n):
            for k in range(j,n):
                print "lambda_{}{}{}\t2\t0\t3".format(i,j,k)
