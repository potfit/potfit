################################################################
#
# kim_compare_lammps
#
################################################################
#
# Copyright 2018 the potfit development team
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the “Software”), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall
# be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# https://www.potfit.net/
#
#################################################################

import math
import os
import random

from subprocess import run

class lammps_run(object):
  def __init__(self, binary, model, config, directory):
    self.binary = binary
    self.config = config
    self.directory = directory
    self.model = model
    self.energy = None
    self.forces = []
    self.__write_config()
    self.__write_input()

  def __write_config(self):
    filename = os.path.join(self.directory, 'config')
    with open(filename, 'w') as f:
      f.write('LAMMPS atomic data generated by kim_compare_lammps python script\n')
      f.write('{} atoms\n'.format(self.config.num_atoms()))
      f.write('{} atom types\n'.format(self.config.num_atom_types))
      self.__write_box(f, self.config.box, self.config.scale)
      f.write('\n Masses\n\n')
      for i in range(self.config.num_atom_types):
        f.write('{} {}\n'.format(i + 1, round(random.uniform(1, 200), 2)))
      f.write('\n Atoms\n\n')
      for i in range(len(self.config.atoms)):
        f.write('{:5} {:5}\t{:2.8f}\t{:2.8f}\t{:2.8f}\n'.format(i + 1, self.config.atom_types[i], self.config.atoms[i][0], self.config.atoms[i][1], self.config.atoms[i][2]))

  def __write_box(self, f, box, scale):
    A = [x * scale[0] for x in box[0]]
    B = [x * scale[1] for x in box[1]]
    C = [x * scale[2] for x in box[2]]
    ax = lenA = math.sqrt(sum(i*i for i in A))
    lenB = math.sqrt(sum(i*i for i in B))
    lenC = math.sqrt(sum(i*i for i in C))
    normA = [x / lenA for x in A]
    bx = sum(x * y for x, y in zip(B, normA))
    by = math.sqrt(lenB * lenB - bx * bx)
    cx = sum(x * y for x, y in zip(C, normA))
    cy = (sum(x * y for x, y in zip(B, C)) - bx * cx) / by
    cz = math.sqrt(lenC * lenC - cx * cx - cy * cy)
    f.write('0 {} xlo xhi\n'.format(ax))
    f.write('0 {} ylo yhi\n'.format(by))
    f.write('0 {} zlo zhi\n'.format(cz))
    f.write('{} {} {} xy xz yz\n'.format(bx, cx, cy))

  def __write_input(self):
    filename = self.directory / 'input'
    with open(filename, 'w') as f:
      f.write('units\t\tmetal\n')
      f.write('atom_style\tatomic\n')
      f.write('newton\t\ton\n')
      f.write('dimension\t3\n')
      f.write('boundary p p p\n')
      f.write('read_data config\n')
      f.write('replicate 1 1 1\n')
      f.write('neigh_modify one 10000\n')
      f.write('pair_style kim {}\n'.format(self.model['NAME']))
      f.write('pair_coeff * * {}\n'.format(' '.join(self.model['SPECIES']) if self.config.num_atom_types > 1 else self.model['SPECIES']))
      f.write('fix 1 all nve\n')
      f.write('dump myDump all custom 100 forces id type x y z fx fy fz\n')
      f.write('run 0')

  def run(self):
    my_env = os.environ.copy()
    my_env['ASAN_OPTIONS'] = 'detect_leaks=0'
    res = run([self.binary, '-in', 'input'], capture_output=True, cwd=self.directory, env=my_env)
    if res.returncode:
      print(self.directory)
      print(res.args)
      print(res.stdout.decode())
      print(res.stderr.decode())
      raise Exception('Error running potfit')
    filename = os.path.join(self.directory, 'log.lammps')
    with open(filename, 'r') as f:
      capture = False
      for line in f:
        if capture:
          self.energy = float(line.split()[2])
          break
        if 'Step Temp E_pair E_mol TotEng Press' in line:
          capture = True

    filename = os.path.join(self.directory, 'forces')
    with open(filename, 'r') as f:
      capture = False
      for line in f:
        if capture:
          items = line.split()
          self.forces.append([float(x) for x in items[5:]])
          continue
        if 'ITEM: ATOMS' in line:
          capture = True
    return self.energy, self.forces

  def cleanup(self):
    pass

if __name__ == '__main__':
  print('Please do not run this script directly, use kim_compare_lammps.py instead!')
  sys.exit(-1)
